Hi!

This is my GSoC project for 2009, called "Replacing Jam VM". My changes will
live in this repository until they (eventually, hopefully) are merged in the
jato main repository.

Project description abstract: "Jato currently depends heavily on the Jam VM
source code for class-file loading by including parts of the Jam VM source
code in Jato. That was initially just a way to speed up Jato development;
now it seems prudent to replace Jam VM with something else, before the
dependencies are made too strong, which will only make it harder to replace
in the future."

Done, more or less:

 - Remove Jam VM .c files from the build
   (this will tell us what the boundaries between jato and jamvm are)

 - Add temporary dummy functions to vm/
   (this should allow jato to build again, but not run)

 - Add the cafebabe files

 - Write the glue code between cafebabe and jato:

	This would be vm_class/vm_method/etc., i.e. jato-specific structures
	with pointers to cafebabe structures, but also direct pointers (instead
	of e.g. indices). We should e.g. load max_stack/max_locals from the
	Code attribute of a method and put it directly into struct vm_method.

 - Write a "class loader":

	Given a class name, search the classpath and load the class (using
	cafebabe).

	Cache classes, so that we don't load the same class twice.

Current plan (expect heavy changes to this as progress is made):

 - Write a zip-/jar-file reader

 - Write a wrapper around object allocation that simply calls malloc()

	Garbage collection can be implemented later.

 - Use pthread for object locking

 - Jato should now work using cafebabe instead of jamvm

 - Remove jamvm/ completely


Vegard Nossum

#include <jit/args.h>
#include <jit/basic-block.h>
#include <jit/compilation-unit.h>
#include <jit/compiler.h>
#include <jit/emulate.h>
#include <jit/expression.h>
#include <jit/statement.h>
#include <jit/bc-offset-mapping.h>
#include <jit/exception.h>
#include <jit/constant-pool.h>

#include <arch/instruction.h>
#include <arch/stack-frame.h>
#include <arch/thread.h>

#include <assert.h>
#include <errno.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include <vm/class.h>
#include <vm/field.h>
#include <vm/gc.h>
#include <vm/method.h>
#include <vm/object.h>
#include <vm/stack-trace.h>
#include <vm/trace.h>
#include <vm/preload.h>
#include <vm/reference.h>

#define MBCGEN_TYPE struct basic_block
#define MBCOST_DATA struct basic_block
#define MBTREE_TYPE struct tree_node
#define MBTREE_OP(t) tree_op(t)
#define MBTREE_LEFT(t) tree->kids[0]
#define MBTREE_RIGHT(t) tree->kids[1]
#define MBREG_TYPE struct var_info *

#define MBMAX_OPCODES STMT_LAST

#define MONOBURG_LOG 1
#define HAVE_ARRAY_ELEM_INIT 1
#define MAX_POSITIVE_IMM		255
#define MAX_NEGATIVE_IMM		0xFFFFFFFF
#define MIN_NEGATIVE_IMM		0xFFFFFF00

struct _MBState;

%%

%termprefix EXPR_ OP_ STMT_

%start stmt

reg:	EXPR_VALUE	0
{
	struct expression *expr;
	struct var_info *result;
	struct compilation_unit *cu = s->b_parent;
	struct lp_entry *pool;
	unsigned long value_low;
	unsigned long value_high;

	expr = to_expr(tree);

	result = get_var(cu, J_INT);
	state->reg1 = result;
	value_low = expr->value & ~0UL;

	if (value_low <= MAX_POSITIVE_IMM)
		select_insn(s, tree, reg_imm_insn(INSN_MOV_REG_IMM, value_low & 0xff, result));
	else if (MIN_NEGATIVE_IMM <= value_low && value_low <= MAX_NEGATIVE_IMM)
		select_insn(s,tree, reg_imm_insn(INSN_MVN_REG_IMM, ~(value_low & 0xff), result));
	else {
		pool = alloc_literal_pool_entry(cu, value_low);
		select_insn(s, tree, reg_pool_insn(INSN_LDR_REG_POOL_IMM, pool, result));
	}

	if (expr->vm_type == J_LONG) {
		result = get_var(s->b_parent, J_INT);
		state->reg2 = result;
		value_high = expr->value >> 32;

		if (value_high <= MAX_POSITIVE_IMM)
			select_insn(s, tree, reg_imm_insn(INSN_MOV_REG_IMM, value_high & 0xff, result));
		else if (MIN_NEGATIVE_IMM <= value_high && value_high <= MAX_NEGATIVE_IMM)
			select_insn(s,tree, reg_imm_insn(INSN_MVN_REG_IMM, ~(value_high & 0xff), result));
		else {
			pool = alloc_literal_pool_entry(cu, value_high);
			select_insn(s, tree, reg_pool_insn(INSN_LDR_REG_POOL_IMM, pool, result));
		}
	}
}

reg:	EXPR_LOCAL	1
{
	struct compilation_unit *cu = s->b_parent;
	struct expression *expr;
	struct stack_slot *slot;
	struct var_info *result;

	expr = to_expr(tree);
	slot = get_local_slot(cu->stack_frame, expr->local_index);

	result = get_var(s->b_parent, J_INT);
	state->reg1 = result;

	select_insn(s, tree, reg_memlocal_insn(INSN_LDR_REG_MEMLOCAL, slot, result));

	if (expr->vm_type == J_LONG) {
		slot = get_local_slot(cu->stack_frame, expr->local_index + 1);

		result = get_var(s->b_parent, J_INT);
		state->reg2 = result;

		select_insn(s, tree, reg_memlocal_insn(INSN_LDR_REG_MEMLOCAL, slot, result));
	}
}

reg:	OP_ADD(reg, EXPR_VALUE) 1
{
	binop_imm_reg_low(state, s, tree, INSN_ADDS_REG_IMM);
	binop_imm_reg_high(state, s, tree, INSN_ADC_REG_IMM);
}

reg:	OP_ADD(reg, reg) 1
{
	binop_reg_reg_low(state, s, tree, INSN_ADDS_REG_REG);
	binop_reg_reg_high(state, s, tree, INSN_ADC_REG_REG);
}

reg:	OP_SUB(reg, EXPR_VALUE) 1
{
	binop_imm_reg_low(state, s, tree, INSN_SUBS_REG_IMM);
	binop_imm_reg_high(state, s, tree, INSN_SBC_REG_IMM);
}

reg:	OP_SUB(reg, reg) 1
{
	binop_reg_reg_low(state, s, tree, INSN_SUBS_REG_REG);
	binop_reg_reg_high(state, s, tree, INSN_SBC_REG_REG);
}

stmt:	STMT_EXPRESSION(reg)
{
}

reg:   EXPR_TEMPORARY 0
{
	struct expression *expr;

	expr = to_expr(tree);

	state->reg1 = expr->tmp_low;

	if (expr->vm_type == J_LONG) {
		state->reg2 = expr->tmp_high;
	}
}

stmt:	STMT_RETURN(reg) 1
{
	struct expression *expr;
	struct var_info *src, *r0, *r1;

	expr = to_expr(tree);

	r0 = get_fixed_var(s->b_parent, MACH_REG_R0);
	src = state->left->reg1;

	select_insn(s, tree, reg_reg_insn(INSN_MOV_REG_REG, src, r0));

	if (expr->vm_type == J_LONG) {
		r1 = get_fixed_var(s->b_parent, MACH_REG_R1);
		src = state->left->reg2;

		select_insn(s, tree, reg_reg_insn(INSN_MOV_REG_REG, src, r1));
	}

	select_insn(s, tree, branch_insn(INSN_UNCOND_BRANCH, s->b_parent->exit_bb));
}

stmt:	STMT_VOID_RETURN
{
	select_insn(s, tree, branch_insn(INSN_UNCOND_BRANCH, s->b_parent->exit_bb));
}

stmt:	STMT_STORE(EXPR_LOCAL, reg)
{
	struct compilation_unit *cu = s->b_parent;
	struct expression *local;
	struct stack_slot *slot;
	struct statement *stmt;
	struct var_info *src;

	src = state->right->reg1;

	stmt = to_stmt(tree);
	local = to_expr(stmt->store_dest);
	slot = get_local_slot(cu->stack_frame, local->local_index);

	select_insn(s, tree, memlocal_reg_insn(INSN_STR_MEMLOCAL_REG, src, slot));

	if (local->vm_type == J_LONG) {
		src = state->right->reg2;

		slot = get_local_slot(cu->stack_frame, local->local_index+1);

		select_insn(s, tree, memlocal_reg_insn(INSN_STR_MEMLOCAL_REG, src, slot));
	}
}

stmt:  STMT_STORE(EXPR_TEMPORARY, EXPR_LOCAL) 1
{
	struct expression *dest, *src;
	struct stack_slot *slot;
	struct statement *stmt;

	stmt = to_stmt(tree);

	src = to_expr(stmt->store_src);
	dest = to_expr(stmt->store_dest);

	slot = get_local_slot(s->b_parent->stack_frame, src->local_index);

	select_insn(s, tree, reg_memlocal_insn(INSN_LDR_REG_MEMLOCAL, slot, dest->tmp_low));
	if (src->vm_type == J_LONG) {
		slot = get_local_slot(s->b_parent->stack_frame, src->local_index + 1);
		select_insn(s, tree, reg_memlocal_insn(INSN_LDR_REG_MEMLOCAL, slot, dest->tmp_high));
	}

}

stmt:  STMT_STORE(EXPR_TEMPORARY, reg) 1
{
	struct expression *temp;
	struct var_info *src, *dest;
	struct statement *stmt;

	stmt = to_stmt(tree);

	temp = to_expr(stmt->store_dest);

	dest = temp->tmp_low;
	src = state->right->reg1;
	select_insn(s, tree, reg_reg_insn(INSN_MOV_REG_REG, src, dest));

	if (temp->vm_type == J_LONG) {
		dest = temp->tmp_high;
		src = state->right->reg2;
		select_insn(s, tree, reg_reg_insn(INSN_MOV_REG_REG, src, dest));
	}
}

%%

static void select_insn(struct basic_block *, struct tree_node *, struct insn *);
static void emit_code(struct basic_block *, MBState *, int);
void insn_select(struct basic_block *);
static void free_state(MBState *);
static void binop_imm_reg_low(struct _MBState *, struct basic_block *, struct tree_node *, enum insn_type);
static void binop_reg_reg_low(struct _MBState *, struct basic_block *, struct tree_node *, enum insn_type);
static void binop_imm_reg_high(struct _MBState *, struct basic_block *, struct tree_node *, enum insn_type);
static void binop_reg_reg_high(struct _MBState *, struct basic_block *, struct tree_node *, enum insn_type);

static void binop_imm_reg_low(struct _MBState *state, struct basic_block *bb,
				struct tree_node *tree, enum insn_type insn_type)
{
	struct expression *expr, *right;
	unsigned long value_low;
	struct lp_entry *pool;
	struct var_info *src;

	state->reg1 = state->left->reg1;

	expr = to_expr(tree);
	right = to_expr(expr->binary_right);

	value_low = right->value & ~0UL;
	if (value_low <= MAX_POSITIVE_IMM)
		select_insn(bb, tree, reg_imm_insn(insn_type, (value_low & 0xFF), state->reg1));
	else {
		src = get_var(bb->b_parent, J_INT);
		pool = alloc_literal_pool_entry(bb->b_parent, value_low);
		select_insn(bb, tree, reg_pool_insn(INSN_LDR_REG_POOL_IMM, pool, src));
		switch (insn_type) {
		case INSN_ADDS_REG_IMM:
			select_insn(bb, tree, reg_reg_insn(INSN_ADDS_REG_REG, src, state->reg1));
			break;
		case INSN_SUBS_REG_IMM:
			select_insn(bb, tree, reg_reg_insn(INSN_SUBS_REG_REG, src, state->reg1));
			break;
		default:
			break;
		}
	}
}

static void binop_reg_reg_low(struct _MBState *state, struct basic_block *bb,
			  struct tree_node *tree, enum insn_type insn_type)
{
	struct var_info *src, *dst;

	src = state->right->reg1;
	dst = state->left->reg1;

	state->reg1 = dst;

	select_insn(bb, tree, reg_reg_insn(insn_type, src, dst));
}

static void binop_imm_reg_high(struct _MBState *state, struct basic_block *bb,
				struct tree_node *tree, enum insn_type insn_type)
{
	struct expression *expr, *right;
	unsigned long value_high;
	struct lp_entry *pool;
	struct var_info *src;

	state->reg2 = state->left->reg2;

	expr = to_expr(tree);
	right = to_expr(expr->binary_right);

	if (expr->vm_type != J_LONG)
		return;

	value_high = right->value >> 32;
	if (value_high <= MAX_POSITIVE_IMM)
		select_insn(bb, tree, reg_imm_insn(insn_type, (value_high & 0xFF), state->reg2));
	else {
		src = get_var(bb->b_parent, J_INT);
		pool = alloc_literal_pool_entry(bb->b_parent, value_high);
		select_insn(bb, tree, reg_pool_insn(INSN_LDR_REG_POOL_IMM, pool, src));
		switch (insn_type) {
		case INSN_ADC_REG_IMM:
			select_insn(bb, tree, reg_reg_insn(INSN_ADC_REG_REG, src, state->reg2));
			break;
		case INSN_SBC_REG_IMM:
			select_insn(bb, tree, reg_reg_insn(INSN_SBC_REG_REG, src, state->reg2));
			break;
		default:
			break;
		}
	}
}

static void binop_reg_reg_high(struct _MBState *state, struct basic_block *bb,
			  struct tree_node *tree, enum insn_type insn_type)
{
	struct var_info *src, *dst;
	struct expression *expr = to_expr(tree);

	if (expr->vm_type != J_LONG)
		return;

	src = state->right->reg2;
	dst = state->left->reg2;

	state->reg2 = dst;

	select_insn(bb, tree, reg_reg_insn(insn_type, src, dst));
}

int select_instructions(struct compilation_unit *cu)
{
	struct basic_block *bb;
	int err = 0;

	cu->frame_ptr = get_fixed_var(cu, MACH_REG_FP);
	if (!cu->frame_ptr) {
		err = -ENOMEM;
		goto out;
	}

	cu->stack_ptr = get_fixed_var(cu, MACH_REG_SP);
	if (!cu->stack_ptr) {
		err = -ENOMEM;
		goto out;
	}

	for_each_basic_block(bb, &cu->bb_list) {
		insn_select(bb);
	}

  out:
	return err;
}

void insn_select(struct basic_block *bb)
{
	struct statement *stmt;
	MBState *state;

	mono_burg_init();

	for_each_stmt(stmt, &bb->stmt_list) {
		state = mono_burg_label(&stmt->node, bb);
		emit_code(bb, state, MB_NTERM_stmt);
		free_state(state);
	}
}

static void emit_code(struct basic_block *bb, MBState *state, int goal)
{
	MBState *kids[2];
	int ern;
	const guint16 *nts;
	int i;

	ern = mono_burg_rule(state, goal);
	nts = mono_burg_nts_data + mono_burg_nts[ern];
	mono_burg_kids(state, ern, kids);

	for (i = 0; nts[i]; i++)
		emit_code(bb, kids[i], nts[i]);

	mono_burg_emit(ern, state, state->tree, bb);

	if (state->reg1)
		assert(!interval_has_fixed_reg(state->reg1->interval));
}

static void free_state(MBState *state)
{
	if (!state)
		return;

	free_state(state->left);
	free_state(state->right);

	g_free(state);
}

static void select_insn(struct basic_block *bb, struct tree_node *tree, struct insn *insn)
{
	insn_set_bc_offset(insn, tree->bytecode_offset);
	bb_add_insn(bb, insn);
}

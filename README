What is it?

  Jato is a Just-in-time (JIT) compiler for Java. It is built on top of JamVM.


How can I try it out?

  - Download development tree:

    $ git clone git://git.kernel.org/pub/scm/java/jato/jato.git

  - Make sure you have necessary dependencies installed to compile the program.

    For Ubuntu:

    $ sudo apt-get install ecj classpath libffi-dev binutils-dev

    For Fedora:

    $ su
    $ yum install eclipse-ecj ; exit

    and

    $ wget ftp://ftp.gnu.org/gnu/classpath/classpath-0.97.2.tar.gz
    $ tar xzvf classpath-0.97.2.tar.gz
    $ cd classpath-0.97.2
    $ ./configure ; make
    $ su
    $ make install ; exit

  - Compile Jato and run the unit tests:

    $ cd <JATO_ROOT> ; make


Running Jato

  Command line options:

    -Xint		Operate in interpreter-only mode.  Useful for
			debugging.
    -Xtrace:jit		Trace all compilation phases for each method.
    -Xtrace:asm		Trace the emitted machine code for each method.


Development

  If you use git for development, please remember to add your committer name
  and email to .git/config file.  The format is as follows:

    [user]
      name = Pekka Enberg
      email = penberg@cs.helsinki.fi


How to run the regression test suite?

  Prequisites:

    - Eclipse Compiler for Java (ECJ)
    - GNU classpath (installed in /usr/local/classpath/)

  To run the test suite, execute the following commands:

    $ make regression

  If you want to run the same suite with the Jam VM interpreter, just add -Xint
  to JAVA_OPTS as follows:

    $ make JAVA_OPTS=-Xint regression


How to launch Java applications with Jato under GDB?

  NTPL threads cause problems while running Jato under gdb. You should
  set the following environment variable before starting the debugger:

    $ export LD_ASSUME_KERNEL=2.4.1

  To set up boot classpath for Jato, set the following environment variable:

    $ export BOOTCLASSPATH=<JATO_ROOT>/lib/classes.zip:/usr/local/classpath/share/classpath/glibj.zip

  Finally, to launch a Java application with Jato under gdb:

    $ gdb --args <JATO_ROOT>/jato/jato <class>


How do I launch a simple application?

  To run a simple Java application, you can download Christian Schneider's Java
  tetris <http://www.liquidreality.de/main/projects/tetris> and launch it with
  the following command (remembed to download jdom jar also):

    $ ./java -Xtrace:jit -Xms32M -Xnocompact -Xnoasyncgc \
             -Dgnu.classpath.boot.library.path=/usr/lib/classpath:lib/ \
             -Xbootclasspath:lib/classes.zip:/usr/share/classpath/glibj.zip \
             -classpath <TETRIS_HOME>/tetris_source.jar:<TETRIS_HOME>/jdom.jar \
             tetris/TetrisFrame

  Note: Jato interacts badly with JamVM GC which is why you should make
  the initial heap size big enough for GC not to trigger during
  execution.

  To launch the application under gdb, use the following command:

    $ gdb --args ./java [...]


Copyright and License

  Copyright (C) 2005-2007  Pekka Enberg

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License version 2 as
  published by the Free Software Foundation.

  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA


Acknowledgements

  I would like to thank the following people/organizations for supporting the
  development of Jato:

    Reaktor Innovations Oy for sponsoring the initial development of Jato.

    The folks at kernel.org for providing public space for my development tree.

  Thank you!
